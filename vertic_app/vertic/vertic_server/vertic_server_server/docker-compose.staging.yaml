# Professional Docker Compose for Vertic Kassensystem - Staging Environment
# Production-ready configuration with monitoring, health checks, and security
version: '3.8'

services:
  # Main Vertic Serverpod Server
  vertic-server:
    build: 
      context: ../../../../..  # Build from project root for proper structure
      dockerfile: vertic_app/vertic/vertic_server/vertic_server_server/Dockerfile
    container_name: vertic-kassensystem-server
    restart: unless-stopped
    ports:
      - "8080:8080"  # API Server
      - "8081:8081"  # Insights Server  
      - "8082:8082"  # Web Server
    environment:
      - RUNMODE=staging
      - SERVER_ID=vertic-primary
      - LOGGING=normal
      - ROLE=monolith
    volumes:
      - ./config:/app/config:ro
      - vertic_logs:/app/logs
      - vertic_uploads:/app/uploads
    networks:
      - vertic-network
    depends_on:
      postgres-check:
        condition: service_completed_successfully
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=false"  # Ready for reverse proxy if needed
      - "vertic.service=kassensystem-api"
      - "vertic.environment=staging"

  # PostgreSQL Connection Health Check
  postgres-check:
    image: postgres:16-alpine
    container_name: vertic-postgres-check
    command: ["sh", "-c", "until pg_isready -h host.docker.internal -p 5432 -U postgres; do echo 'Waiting for PostgreSQL...'; sleep 3; done; echo 'PostgreSQL is ready!'"]
    networks:
      - vertic-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Log Rotation Service (for production)
  logrotate:
    image: blacklabelops/logrotate:1.3
    container_name: vertic-logrotate
    restart: unless-stopped
    volumes:
      - vertic_logs:/logs
      - ./logrotate.conf:/etc/logrotate.conf:ro
    environment:
      - LOGS_DIRECTORIES=/logs
      - LOGROTATE_INTERVAL=daily
      - LOGROTATE_COPIES=7
    networks:
      - vertic-network
    profiles:
      - production

# Named Volumes for Data Persistence
volumes:
  vertic_logs:
    driver: local
    name: vertic_kassensystem_logs
  vertic_uploads:
    driver: local
    name: vertic_kassensystem_uploads

# Dedicated Network for Service Communication
networks:
  vertic-network:
    driver: bridge
    name: vertic_kassensystem_network
    ipam:
      config:
        - subnet: 172.20.0.0/24

# Configuration for Production Monitoring (optional)
x-monitoring-labels: &monitoring-labels
  - "prometheus.io/scrape=true"
  - "prometheus.io/port=8081"
  - "prometheus.io/path=/metrics" 