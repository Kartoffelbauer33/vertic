version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: vertic-postgres
    environment:
      # SICHER: Environment Variables aus .env Datei
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vertic-network

  # Serverpod Server
  vertic-server:
    build: .
    container_name: vertic-server
    environment:
      # OFFIZIELLE SERVERPOD 2.8.0 ENVIRONMENT VARIABLES
      # Laut https://docs.serverpod.dev/concepts/configuration
      SERVERPOD_DATABASE_HOST: postgres
      SERVERPOD_DATABASE_PORT: 5432
      SERVERPOD_DATABASE_NAME: ${POSTGRES_DB}
      SERVERPOD_DATABASE_USER: ${POSTGRES_USER}
      SERVERPOD_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      SERVERPOD_SERVER_ID: default
      SERVERPOD_API_SERVER_PUBLIC_HOST: ${PUBLIC_HOST}
      SERVERPOD_API_SERVER_PUBLIC_PORT: 8080
      SERVERPOD_API_SERVER_PUBLIC_SCHEME: http
    ports:
      - "8080:8080"
      - "8081:8081"
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vertic-network

volumes:
  postgres_data:

networks:
  vertic-network:
    driver: bridge
