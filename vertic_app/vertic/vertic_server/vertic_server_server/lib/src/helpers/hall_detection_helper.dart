import 'package:serverpod/serverpod.dart';
import '../generated/protocol.dart';

/// üéØ HALL DETECTION HELPER
///
/// Ermittelt die passende Hall-ID f√ºr einen User basierend auf:
/// 1. GPS-Koordinaten (wenn verf√ºgbar)
/// 2. User-Pr√§ferenzen (preferredHallId)
/// 3. Letzte bekannte Halle (lastKnownHallId)
/// 4. Registrierungs-Halle (registrationHallId)
/// 5. Fallback: Default Hall
class HallDetectionHelper {
  /// Hauptmethode: Ermittelt die beste Hall-ID f√ºr einen User
  static Future<int> detectHallForUser(
    Session session,
    int userId, {
    double? latitude,
    double? longitude,
  }) async {
    try {
      // 1. GPS-basierte Erkennung (wenn Koordinaten verf√ºgbar)
      if (latitude != null && longitude != null) {
        final gpsHallId = await _detectHallByGPS(session, latitude, longitude);
        if (gpsHallId != null) {
          session.log('üìç GPS Hall erkannt: $gpsHallId f√ºr User $userId');
          return gpsHallId;
        }
      }

      // 2. TODO Phase 2.5: User-Pr√§ferenzen aus erweiterten AppUser-Feldern
      // Nach Migration: preferredHallId, lastKnownHallId, registrationHallId

      // 3. F√ºr jetzt: User muss ausw√§hlen (wird in Client-App implementiert)
      session.log(
          '‚ùì Keine GPS-Erkennung m√∂glich - User $userId muss Gym ausw√§hlen');

      // 4. Fallback: Zeige verf√ºgbare Gyms, Default Hall zur√ºckgeben
      return _getDefaultHallId();
    } catch (e) {
      session.log('‚ùå Fehler bei Hall-Detection f√ºr User $userId: $e',
          level: LogLevel.error);
      return _getDefaultHallId();
    }
  }

  /// GPS-basierte Hall-Erkennung
  static Future<int?> _detectHallByGPS(
    Session session,
    double latitude,
    double longitude,
  ) async {
    try {
      // TODO: Implementiere GPS-Distanz-Berechnung zu allen Hallen
      // F√ºr jetzt: Einfache Beispiel-Logik

      // Beispiel: Basel Area Detection
      if (_isInBaselArea(latitude, longitude)) {
        return 1; // Basel Hall
      }

      // Beispiel: Z√ºrich Area Detection
      if (_isInZurichArea(latitude, longitude)) {
        return 2; // Z√ºrich Hall
      }

      session.log(
          'üìç GPS Position ($latitude, $longitude) keiner bekannten Halle zugeordnet');
      return null;
    } catch (e) {
      session.log('‚ùå GPS Hall-Detection Fehler: $e', level: LogLevel.error);
      return null;
    }
  }

  /// Pr√ºft ob Koordinaten im Basel-Bereich sind (vereinfacht)
  static bool _isInBaselArea(double lat, double lng) {
    // Basel: ~47.5596¬∞ N, 7.5886¬∞ E
    // Radius: ~10km
    const baselLat = 47.5596;
    const baselLng = 7.5886;
    const radius = 0.1; // ~10km in Grad-N√§herung

    return (lat - baselLat).abs() < radius && (lng - baselLng).abs() < radius;
  }

  /// Pr√ºft ob Koordinaten im Z√ºrich-Bereich sind (vereinfacht)
  static bool _isInZurichArea(double lat, double lng) {
    // Z√ºrich: ~47.3769¬∞ N, 8.5417¬∞ E
    const zurichLat = 47.3769;
    const zurichLng = 8.5417;
    const radius = 0.1; // ~10km in Grad-N√§herung

    return (lat - zurichLat).abs() < radius && (lng - zurichLng).abs() < radius;
  }

  // Entfernt da nicht verwendet bis Phase 2.5 AppUser-Migration
  // TODO Phase 2.5: _updateUserHallPreference implementieren

  /// Pr√ºft ob eine Hall-ID existiert und aktiv ist
  static Future<bool> _isValidHall(Session session, int hallId) async {
    try {
      final gym = await Gym.db.findById(session, hallId);
      return gym != null; // TODO: Erweitern um isActive-Check falls vorhanden
    } catch (e) {
      session.log('‚ùå Hall-Validierung fehlgeschlagen f√ºr Hall $hallId: $e',
          level: LogLevel.error);
      return false;
    }
  }

  /// Default Hall-ID (f√ºr Fallback-F√§lle)
  static int _getDefaultHallId() {
    return 1; // Basel als Default
  }

  /// Holt alle verf√ºgbaren Gyms f√ºr User-Auswahl (wenn GPS nicht funktioniert)
  static Future<List<Gym>> getAvailableGyms(Session session) async {
    try {
      final gyms = await Gym.db.find(
        session,
        where: (g) => g.isActive.equals(true),
        orderBy: (g) => g.name,
      );

      session.log('üè¢ ${gyms.length} verf√ºgbare Gyms geladen f√ºr User-Auswahl');
      return gyms;
    } catch (e) {
      session.log('‚ùå Fehler beim Laden der verf√ºgbaren Gyms: $e',
          level: LogLevel.error);
      return [];
    }
  }

  /// Ermittelt Gym-Details f√ºr eine Hall-ID
  static Future<Gym?> getGymDetails(Session session, int hallId) async {
    try {
      final gym = await Gym.db.findById(session, hallId);
      if (gym == null) {
        session.log('‚ö†Ô∏è Gym mit ID $hallId nicht gefunden',
            level: LogLevel.warning);
      }
      return gym;
    } catch (e) {
      session.log('‚ùå Fehler beim Laden von Gym $hallId: $e',
          level: LogLevel.error);
      return null;
    }
  }

  /// Aktualisiert lastKnownHallId nach erfolgreichem Check-in
  /// TODO Phase 2.5: Nach AppUser-Migration implementieren
  static Future<void> updateLastKnownHall(
    Session session,
    int userId,
    int hallId,
  ) async {
    // TODO: Nach AppUser-Migration mit lastKnownHallId implementieren
    session.log('üïí TODO: User $userId lastKnownHallId aktualisieren: $hallId');
  }

  /// Setzt User-Hall-Pr√§ferenz manuell (z.B. via App-Settings)
  /// TODO Phase 2.5: Nach AppUser-Migration implementieren
  static Future<bool> setUserHallPreference(
    Session session,
    int userId,
    int hallId,
  ) async {
    try {
      // Validierung
      final isValidHall = await _isValidHall(session, hallId);
      if (!isValidHall) {
        session.log('‚ùå Ung√ºltige Hall-ID: $hallId', level: LogLevel.warning);
        return false;
      }

      // TODO: Nach AppUser-Migration mit preferredHallId implementieren
      session.log('‚≠ê TODO: User $userId Hall-Pr√§ferenz setzen: $hallId');
      return true;
    } catch (e) {
      session.log('‚ùå Fehler beim Setzen der Hall-Pr√§ferenz: $e',
          level: LogLevel.error);
      return false;
    }
  }
}
