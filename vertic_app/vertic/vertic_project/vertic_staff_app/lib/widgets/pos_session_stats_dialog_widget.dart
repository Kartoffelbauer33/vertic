import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:test_server_client/test_server_client.dart';

/// **üìä POS SESSION STATS DIALOG WIDGET**
///
/// Eigenst√§ndige UI-Komponente f√ºr Session-Statistiken-Dialog im POS-System:
/// - ‚úÖ Backend-Integration f√ºr Session-Statistiken
/// - ‚úÖ Bereinigungsfunktion mit Feedback
/// - ‚úÖ Callback-basierte Interaktion (keine Logik-√Ñnderungen)
/// - ‚úÖ Vollst√§ndige Fehlerbehandlung
/// - ‚úÖ Responsive Layout mit ScrollView
class PosSessionStatsDialogWidget extends StatelessWidget {
  const PosSessionStatsDialogWidget({super.key});

  /// **üìä STATISCHE METHODE: Dialog anzeigen**
  static Future<void> show(BuildContext context) async {
    try {
      final client = Provider.of<Client>(context, listen: false);
      final stats = await client.pos.getSessionStats();

      if (context.mounted) {
        showDialog(
          context: context,
          builder: (context) => PosSessionStatsDialogWidget._buildDialog(
            context: context,
            stats: stats,
            client: client,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Fehler beim Laden der Statistiken: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  /// **üèóÔ∏è PRIVATER DIALOG-BUILDER**
  static Widget _buildDialog({
    required BuildContext context,
    required Map<String, dynamic> stats,
    required Client client,
  }) {
    return AlertDialog(
      title: const Text('üìä Session-Statistiken'),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('üìã Total Sessions: ${stats['total']}'),
            const SizedBox(height: 8),
            Text('‚úÖ Aktive Sessions: ${stats['active']}'),
            Text('üí∞ Bezahlte Sessions: ${stats['completed']}'),
            Text('üóëÔ∏è Abandoned Sessions: ${stats['abandoned']}'),
            const SizedBox(height: 8),
            Text('üë§ Mit Kunde: ${stats['with_customer']}'),
            Text('üì¶ Mit Artikeln: ${stats['with_items']}'),
            Text('üîÑ Leer: ${stats['empty']}'),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Schlie√üen'),
        ),
        ElevatedButton(
          onPressed: () async {
            Navigator.of(context).pop();
            await _performCleanup(context, client);
          },
          style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
          child: const Text('üßπ Bereinigen'),
        ),
      ],
    );
  }

  /// **üßπ PRIVATE BEREINIGUNGSFUNKTION**
  static Future<void> _performCleanup(BuildContext context, Client client) async {
    try {
      final cleanupStats = await client.pos.cleanupSessionsWithBusinessLogic();
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‚úÖ Bereinigung: ${cleanupStats['deleted_from_db']} Sessions gel√∂scht',
            ),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Fehler: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // Dieser Widget wird nicht direkt verwendet, sondern √ºber die statische show() Methode
    return const SizedBox.shrink();
  }
}
